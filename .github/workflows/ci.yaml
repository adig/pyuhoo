---
name: CI

# yamllint disable-line rule:truthy
on:
  push:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  tests:
    name: Python ${{matrix.python-version}} on ${{matrix.os}}
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        python-version: [3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2

      - name: 🏗 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📝 Get full Python version
        id: full-python-version
        shell: bash
        run: >
          echo ::set-output name=version::$(python -"import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: 🏗 Install poetry
        shell: bash
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
            | python - -y

      - name: 🔧 Update PATH (not Windows)
        if: ${{ matrix.os != 'Windows' }}
        shell: bash
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔧 Update PATH for Windows
        if: ${{ matrix.os == 'Windows' }}
        shell: bash
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: 🔧 Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 🔧 Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: 🏗 Install dependencies
        shell: bash
        run: poetry install

      - name: ✅ Run pytest
        shell: bash
        run: poetry run python -m pytest -p no:sugar -q tests/
